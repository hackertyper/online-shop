model online-shop {
//Services
server Server {
	Service service;
}
//Services
abstract server Service {
}
server RegisterService extends Service {
	void register@@Registrieren(String accountName, String password PASSWORD) throws DoubleUsername;
}
server ShopkeeperService extends Service {
	skip-view one-to-one (server-only myServer) Shopkeeper manager;
	//Preset account settings
	void presetLowerLimit@@Kundenkonto:Unteres_Limit_setzen(Integer amount);
	void presetBalance@@Kundenkonto:Startkapital_setzen(Integer amount);
	//Preset order settings
	void changeTime@@Kundenlieferzeit:Dauer_ändern(CustomerDelivery cd, Integer newTime);
	void changeExtraCharge@@Kundenlieferzeit:Kosten_ändern(CustomerDelivery cd, Integer newCharge);
	void changeRetourePercentage@@Retoure:Prozentsatz_ändern(Integer newPercentage);
	//data manipulating methods
	void changePrice@@Artikelpreis_ändern(Article article, Integer newPrice);
	void changeProductGroup@@Produktgruppe_wechseln(Article article, ProductGroup newPG);
	void changeDescription@@Beschreibung_ändern(Item item, String newDescription);
	void changeManufacturerDelivery@@Herstellerlieferzeit_ändern(Article article, Integer newManuDelivery);
	void startSelling@@Verkauf_starten(NewlyAdded article);
	void startSellingAgain@@Verkauf_erneut_starten(RemovedFSale article);
	void stopSelling@@Nicht_mehr_nachbestellen(OfferedFSale article);
	void changeMinStock@@Minimalen_Lagerbestand_ändern(Article article, Integer minStock) throws InvalidStockNumber;
	void changeMaxStock@@Maximalen_Lagerbestand_ändern(Article article, Integer maxStock) throws InvalidStockNumber;
	void orderNew@@Bestellen(NewlyAdded article, Integer amount);
	// data query methods
	Integer countArticles@@Anzahl_enthaltener_Artikel(ProductGroup pg);
	// data creation methods
	void createProductGroup@@Produktguppe_erstellen(ProductGroup parent, String description);
	void createArticle@@Artikel_erstellen(ProductGroup parent, String description, String manufacturer, Integer price, Integer maxStock, Integer minStock, Integer manuDelivery) throws InvalidStockNumber;
}
server CustomerService extends Service {
	CustomerService ** services;
	skip-view prior one-to-one (no-view myCustomerServer) CustomerManager manager;
	server-only void signalChanged();
}
server ShopService extends CustomerService {
	skip-view one-to-one (no-view myShopServer) ShopManager shopMngr;
	//Shopview
	void findArticle@@Artikel_suchen(String description);
	void addToCart@@Zum_Einkaufswagen_hinzufügen(Article article, Integer amount);
}
server AccountService extends CustomerService {
	skip-view one-to-one (no-view myAccServer) AccountManager accMngr;
	//Kontoview
	void deposit@@Geld_einzahlen(Integer amount);
	void withdraw@@Geld_abheben(Integer amount) throws InsufficientFunds;
}
server CartService extends CustomerService {
	skip-view one-to-one (no-view myCartServer) CartManager cartMngr;
	//Einkaufswagenview
	server-only void addToCart(Article article, Integer amount);
	void changeAmount@@Anzahl_ändern(QuantifiedArticles article, Integer newAmount);
	void removeFCart@@Löschen(QuantifiedArticles article);
	void checkOut@@Zur_Kasse_gehen();
	void order@@Bestellen(Cart cart, CustomerDelivery deliveryMethod);
}
server OrderService extends CustomerService {
	skip-view one-to-one (no-view myOrderServer) OrderManager orderMngr;
	//Lieferungenview
	void acceptDelivery@@Lieferung_annehmen(CustomerOrder customerOrder);
	void retoureDelivery@@Lieferung_zurückschicken(CustomerOrder customerOrder);
	void retoureArticle@@Artikel_zurückschicken(QuantifiedArticles article, Integer amount);
	void cancel@@Bestellung_stornieren(PreOrder preOrder);
	void preorder@@Bestellen(PreOrder preOrder, CustomerDelivery deliveryMethod);
}
//Manager classes
class CustomerManager {
	server-only one-to-one (no-view customerManager) ShopManager shopMngr;
	server-only one-to-one (no-view customerManager) AccountManager accMngr;
	server-only one-to-one (no-view customerManager) CartManager cartMngr;
	server-only one-to-one (no-view customerManager) OrderManager orderMngr;
	void signalChanged();
	void addToCart(Article article, Integer amount);
	active void deposit(Integer amount);
	active void withdraw(Integer amount) throws InsufficientFunds;
	void returnPayment(Integer sum);
	void pay(Integer sum) throws InsufficientFunds;
	void addOrder(CustomerOrder order);
	void addPreOrder(PreOrder preOrder);
}
class ShopManager {
	observe ProductGroup basicProductGroup;
	event void addToCart(Article article, Integer amount);
	active void findArticle(String description);
}
class AccountManager {
	one-to-one (no-view accMngr) Account myAccount;
	void deposit(Integer amount);
	void withdraw(Integer amount) throws InsufficientFunds;
	void returnPayment(Integer sum);
	void pay(Integer sum) throws InsufficientFunds;
}
class CartManager {
	one-to-one (no-view cartMngr) Cart myCart;
	observe QuantifiedArticles ** articleList;
	observe StandardDelivery standardDelivery;
	observe OverNightDelivery onDelivery;
	no-view PreOrder preOrder;
	active void changeAmount(QuantifiedArticles article, Integer newAmount);
	void addToCart(Article article, Integer amount);
	active void removeFCart(QuantifiedArticles article);
	active void addArticle(Article article, Integer amount);
	active void checkOut() throws InsufficientStock;
	active void order(CustomerDelivery deliveryMethod) throws InsufficientFunds, FirstCheckOut;
	void addOrder(CustomerOrder order);
	void addPreOrder(PreOrder preOrder);
	void pay(Integer sum) throws InsufficientFunds;
}
class OrderManager {
	CustomerOrder ** orders;
	PreOrder ** preOrders;
	Integer retourePrice;
	void addOrder(CustomerOrder order);
	void addPreOrder(PreOrder preOrder);
	active void acceptDelivery(CustomerOrder arrivedOrder) throws NotArrived;
	active void retoureDelivery(CustomerOrder arrivedOrder) throws InsufficientFunds, NotArrived;
	active void retoureArticle(QuantifiedArticles article, Integer amount) throws InsufficientFunds, NotArrived;
	active void cancel(PreOrder preOrder);
	active void preorder(PreOrder preOrder, CustomerDelivery deliveryMethod) throws InsufficientFunds;
}
class Account {
	Integer lowerLimit;
	Integer balance;
	void deposit(Integer amount);
	void withdraw(Integer amount) throws InsufficientFunds;
	void returnPayment(Integer sum);
	void pay(Integer sum) throws InsufficientFunds;
}
class CustomerPresets {
	Integer lowerLimit;
	Integer retourePercentage;
}
class Cart {
	Integer currentSum;
	skip-view prior CartState state;
	void changeState(CartState newState);
	Integer fetchCurrentSum();
	void changeAmount(QuantifiedArticles article, Integer newAmount);
	void removeArticle(QuantifiedArticles article);
	void checkOut();
	void order(CustomerDelivery deliveryMethod) throws InsufficientFunds, FirstCheckOut;
	void checkOutReverse();
}
abstract class CartState (OpenCart) {}
class CheckedOut extends CartState{}
//Shopkeeper classes
class Shopkeeper {
	observe ProductGroup basicProductGroup;
	public CustomerPresets presets;
	// data creation methods
	void createProductGroup(ProductGroup parent, String description);
	void createArticle(ProductGroup parent, String description, String manufacturer, Integer price, Integer maxStock, Integer minStock, Integer manuDelivery) throws InvalidStockNumber;
	StandardDelivery standardDelivery;
	OverNightDelivery onDelivery;
	active void changeTime(CustomerDelivery cd, Integer newTime);
	active void changeCharge(CustomerDelivery cd, Integer newCharge);
	active void presetLowerLimit(Integer amount);
	active void presetBalance(Integer amount);
	active event void changePrice(Article article, Integer newPrice);
	active event void changeProductGroup##chngPG(Article article, ProductGroup newPG);
	active event void changeDescription(Item item, String newDescription);
	active void changeRetourePercentage##chngRtPr(Integer newPercentage);
}
//Article classes
abstract class Item {
	prior indexed String description;
	void changeDescription(String newDescription);
	abstract Integer cumulateArticleCount();
}
class ProductGroup extends Item {
	one-to-one (server-only parent) Item ** itemList;
	event void addItem(Item item);
}
class Article extends Item{
	//Attributes
	prior Manufacturer manufacturer;
	one-to-one (server-only myArticle) ArticleState state;
	skip-view one-to-one (no-view myArticle) ArticleWrapper myWrapper; 
	prior Integer price;
	prior Integer minStock;
	prior Integer maxStock;
	Integer stock;
	Integer reserved;
	// Methods
	event void changePrice(Integer newPrice);
	void changeManuDelivery(Integer newManuDelivery);
	void changeProductGroup##chngePG(ProductGroup newPG);
	active void changeMinStock(Integer minStock) throws InvalidStockNumber;
	active void changeMaxStock(Integer maxStock) throws InvalidStockNumber;
	event void reserve(Integer amount) throws InsufficientStock;
	event void deleteReserve(Integer amount);
	void pack(Integer amount);
	event void receiveDelivery(Integer amount);
}
// wrapper for display in customer view
class ArticleWrapper {
	derived Integer price;
	derived Integer stock;
}
class Manufacturer {
	prior String name;
	prior Integer manuDelivery;
	void changeManuDelivery(Integer newManuDelivery);
}
// classes for article states
interface ArticleState {}
class NewlyAdded implements ArticleState{
	active void startSelling();
	void order(Integer amount);
}
class OfferedFSale implements ArticleState {
	void addToCart(Integer amount, Cart cart);
	void refillStock();
	void stopSelling();
	void reorder(Integer amount, Integer manuDelivery);
}
class RemovedFSale implements ArticleState {
	void addToCart(Integer amount, Cart cart) throws InsufficientStock;
	void startSellingAgain();
}
class QuantifiedArticles {
	observe skip-view prior Article article;
	CustomerOrder myOrder;
	prior Integer amount;
	Integer fetchPrice();
	void changeAmount(Integer newAmount);
	void reserve() throws InsufficientStock;
	void deleteReserve();
	void pack();
	void retoure(Integer amount) throws NotArrived;
	event void fireArticleChanged(extern model.meta.ArticleMssgs evnt);
}
//Order classes
abstract class Delivery {
	prior Integer remainingTimeToDelivery##rmngTmDlvr;
	prior Timestamp sendDate;
	void send();
	abstract void deliver();
}
class ShopKeeperOrder extends Delivery {
	prior Article article;
	prior Integer amount;	
}
class Retoure extends Delivery {
	QuantifiedArticles ** articleList;
}
class CustomerOrder extends Delivery {
	observe QuantifiedArticles ** articleList;
	no-view OrderManager ordermngr;
	no-view CustomerOrderState myState;
	void arrived();
	void accepted();
	void retoure() throws NotArrived;
}
class PreOrder {
	no-view prior CartManager cartManager;
	no-view prior Integer sum;
	observe QuantifiedArticles ** articleList;
	StandardDelivery standardDelivery;
	OverNightDelivery onDelivery;
	void cancel();
	CustomerOrder preorder(CustomerDelivery deliveryMethod) throws InsufficientFunds;
}
// State classes for CustomerOrder
interface CustomerOrderState##csOrdStt {}
class SendOrder implements CustomerOrderState{
	prior Timestamp arrivalDate;
}
class ArrivedOrder implements CustomerOrderState {
	Integer timeToAccept;
}
//Delivery method classes
abstract class CustomerDelivery {
	Integer time;
	Integer extraCharge;
	abstract event void changeTime(Integer newTime);
	abstract event void changeExtraCharge(Integer newCharge);
}
singleton StandardDelivery extends CustomerDelivery {}
singleton OverNightDelivery extends CustomerDelivery {}
singleton TestDelivery extends CustomerDelivery {}

// Exceptions
exception DoubleUsername{}
exception InsufficientFunds{}
exception InsufficientStock{}
exception FirstCheckOut{}
exception NotArrived{}
exception InvalidStockNumber{}
}
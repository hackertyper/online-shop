model online-shop {
//Services
server Server {
	Service service;
}
//Services
abstract server Service {
}
server ShopkeeperService extends Service {
	skip-view one-to-one (server-only myServer) Shopkeeper manager;
	server-only Integer lowerLimitPreset;
	server-only Integer balancePreset;
	//Preset account settings
	void presetLowerLimit@@Kundenkonto:Unteres_Limit_setzen(Integer amount);
	void presetBalance@@Kundenkonto:Startkapital_setzen(Integer amount);
	//data manipulating methods
	void changePrice@@Artikelpreis_ändern(Article article, Integer newPrice);
	void changeProductGroup@@Produktgruppe_wechseln(Article article, ProductGroup newPG);
	void changeDescription@@Beschreibung_ändern(Item item, String newDescription);
	void changeManufacturerDelivery@@Herstellerlieferzeit_ändern(Integer newManuDelivery);
	void startSelling@@Verkauf_starten(NewlyAdded article);
	void changeTime@@Kundenlieferzeit:Dauer_ändern(CustomerDelivery cd, Integer newTime);
	void changeExtraCharge@@Kundenlieferzeit:Kosten_ändern(CustomerDelivery cd, Integer newCharge);
}
server CustomerService extends Service {
	CustomerService ** services;
	skip-view prior one-to-one (no-view myCustomerServer) CustomerManager manager;
}
server ShopService extends CustomerService {
	skip-view one-to-one (no-view myShopServer) ShopManager shopMngr;
	//Shopview
	void findArticle@@Artikel_suchen(String description);
	void addToCart@@Zum_Einkaufswagen_hinzufügen(Article article, Integer amount);
}
server AccountService extends CustomerService {
	skip-view one-to-one (no-view myAccServer) AccountManager accMngr;
	//Kontoview
	void deposit@@Geld_einzahlen(Integer amount);
	void withdraw@@Geld_abheben(Integer amount) throws InsufficientFunds;
}
server CartService extends CustomerService {
	skip-view one-to-one (no-view myCartServer) CartManager cartMngr;
	//Einkaufswagenview
	server-only void addToCart(Article article, Integer amount);
	void changeAmount@@Anzahl_ändern(QuantifiedArticles article, Integer newAmount);
	void removeFCart@@Löschen(QuantifiedArticles article);
	void checkOut@@Zur_Kasse_gehen();
	void order@@Bestellen(Cart cart, CustomerDelivery deliveryMethod);
}
server OrderService extends CustomerService {
	skip-view one-to-one (no-view myOrderServer) OrderManager orderMngr;
	//Lieferungenview
	void acceptDelivery@@Lieferung_annehmen(CustomerOrder customerOrder);
	void retoureDelivery@@Lieferung_zurückschicken(CustomerOrder customerOrder, QuantifiedArticles ** list);
}
server RegisterService extends Service {
	void register@@Registrieren(String accountName, String password PASSWORD) throws DoubleUsername;
}
//Customer classes
class CustomerManager {
	server-only one-to-one (no-view customerManager) ShopManager shopMngr;
	server-only one-to-one (no-view customerManager) AccountManager accMngr;
	server-only one-to-one (no-view customerManager) CartManager cartMngr;
	server-only one-to-one (no-view customerManager) OrderManager orderMngr;
	void addToCart(Article article, Integer amount);
	active void deposit(Integer amount);
	active void withdraw(Integer amount) throws InsufficientFunds;
	void returnPayment(Integer sum);
	void pay(Integer sum) throws InsufficientFunds;
	void addOrder(CustomerOrder order);
}
class ShopManager {
	observe Item ** itemRange;
	event void addToCart(Article article, Integer amount);
	active void findArticle(String description);
}
class AccountManager {
	one-to-one (no-view accMngr) Account myAccount;
	void deposit(Integer amount);
	void withdraw(Integer amount) throws InsufficientFunds;
	void returnPayment(Integer sum);
	void pay(Integer sum) throws InsufficientFunds;
}
class CartManager {
	one-to-one (no-view cartMngr) Cart myCart;
	observe QuantifiedArticles ** articleList;
	StandardDelivery standardDelivery;
	OverNightDelivery onDelivery;
	active void changeAmount(QuantifiedArticles article, Integer newAmount);
	void addToCart(Article article, Integer amount);
	active void removeFCart(QuantifiedArticles article);
	active event void addArticle(Article article, Integer amount);
	active void checkOut() throws InsufficientStock;
	active void order(CustomerDelivery deliveryMethod) throws InsufficientFunds, FirstCheckOut;
	void addOrder(CustomerOrder order);
	void pay(Integer sum) throws InsufficientFunds;
}
class OrderManager {
	CustomerOrder ** orders;
	Integer retourePrice;
	void addOrder(CustomerOrder order);
	active void acceptDelivery(CustomerOrder arrivedOrder);
	active void retoureDelivery(CustomerOrder arrivedOrder, QuantifiedArticles ** list) throws InsufficientFunds;
}
class Account {
	Integer lowerLimit;
	Integer balance;
	void deposit(Integer amount);
	void withdraw(Integer amount) throws InsufficientFunds;
	void returnPayment(Integer sum);
	void pay(Integer sum) throws InsufficientFunds;
}
class Cart {
	Integer currentSum;
	skip-view prior CartState state;
	void changeState(CartState newState);
	Integer fetchCurrentSum();
	void changeAmount(QuantifiedArticles article, Integer newAmount);
	void removeArticle(QuantifiedArticles article);
	void checkOut() throws InsufficientStock;
	void order(CustomerDelivery deliveryMethod) throws InsufficientFunds, FirstCheckOut;
	void checkOutReverse();
}
abstract class CartState (OpenCart) {}
class CheckedOut extends CartState{}
//Shopkeeper classes
class Shopkeeper {
	Item ** itemRange;
	StandardDelivery standardDelivery;
	OverNightDelivery onDelivery;
	active void changeTime(CustomerDelivery cd, Integer newTime);
	active void changeCharge(CustomerDelivery cd, Integer newCharge);
}
//Article classes
abstract class Item {
	prior indexed String description;
	active void changeDescription(String newDescription);
}
class ProductGroup extends Item {
	Item ** itemList;
	void addItem(Item item);
}
class Article extends Item{
	//Attributes
	skip-view prior Manufacturer manufacturer;
	skip-view one-to-one (no-view myArticle) ArticleState state;
	skip-view one-to-one (no-view myArticle) ArticleWrapper myWrapper; 
	prior Integer price;
	prior Integer minStock;
	prior Integer maxStock;
	prior Integer manuDelivery;
	Integer stock;
	// Methods
	active void changePrice(Integer newPrice);
	active void changeManuDelivery(Integer newManuDelivery);
	active void changeProductGroup##chngePG(ProductGroup newPG);
	void reserve(Integer amount) throws InsufficientStock;
	void deleteReserve(Integer amount);
	void pack(Integer amount);
	void receiveDelivery(Integer amount);
}
class ArticleWrapper {
	derived Integer price;
	derived Integer stock;
}
class Manufacturer {
	prior String name;
}
interface ArticleState {}
class NewlyAdded implements ArticleState{
	active void startSelling();
}
class OfferedFSale implements ArticleState {
	void addToCart(Integer amount, Cart cart);
	void reorder(Integer amount, Integer manuDelivery);
}
class RemovedFSale implements ArticleState {
	void addToCart(Integer amount, Cart cart) throws InsufficientStock;
}
class QuantifiedArticles {
	skip-view prior Article article;
	prior Integer amount;
	Integer fetchPrice();
	void changeAmount(Integer newAmount);
	void reserve() throws InsufficientStock;
	void deleteReserve();
	void pack();
}
//Order classes
abstract class Delivery implements extern java.lang.Runnable{
	prior Integer remainingTimeToDelivery##rmngTmDlvr;
	prior Timestamp sendDate;
	void send();
	abstract void deliver();
	system void run();
}
class ShopKeeperOrder extends Delivery {
	prior Article article;
	prior Integer amount;	
}
class Retoure extends Delivery {
	QuantifiedArticles ** articleList;
}
class CustomerOrder extends Delivery {
	QuantifiedArticles ** articleList;
	no-view OrderManager ordermngr;
	no-view CustomerOrderState myState;
	void arrived();
	void accepted();
	void retoure(QuantifiedArticles ** list);
}
interface CustomerOrderState##csOrdStt {}
class PreOrder implements CustomerOrderState{
	void cancel();
}
class SendOrder implements CustomerOrderState{
	prior Timestamp arrivalDate;
}
class ArrivedOrder implements CustomerOrderState {
	Integer timeToAccept;
}
//Delivery method classes
abstract class CustomerDelivery {
	Integer time;
	Integer extraCharge;
	abstract void changeTime(Integer newTime);
	abstract void changeExtraCharge(Integer newCharge);
}
singleton StandardDelivery extends CustomerDelivery {}
singleton OverNightDelivery extends CustomerDelivery {}
singleton TestDelivery extends CustomerDelivery {}
// Exceptions
exception DoubleUsername{}
exception InsufficientFunds{}
exception InsufficientStock{}
exception FirstCheckOut{}
}